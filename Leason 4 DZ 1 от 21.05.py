"""                             Теоретические вопросы:                         """
# 1. Что такое ООП?
# 2. Что хранит в себе класс?
# 3. Для чего нужна инкапсуляция, опишите техническим язык и
# приведите пример из жизни.
# 4. Для чего нам геттер и сеттер. опишите техническим язык и
# приведите пример из жизни.


# 1. ООП это метод программирования, где программа состоит из объектов, которые объединяют данные и методы. объекты взаимодействуют между собой через инкапсуляцию полиморфизм и наследование

# 2. Атрибуты и методы.

# 3. Инкапсуляция - сокрытие данных (атрибутов) + безопасный интерфейс (геттеры/сеттеры). т.е. этот механизм в ООП реализующий сокрытие состояния объекта и предоставление контролируемого интерфейса.
# Нужна для защиты данных и контроля изменений.
# Пример из жизни: такой же как и в геттерах и сеттерах....

# 4. Геттеры и сеттеры это метод в ооп позволяющий управлять доступом к атрибутами объекта.
# Нужны, чтобы контролировать и проверять данные обьекта. т.е. безопастно управвлять данными внутри обьекта.
# Пример из жизни: устанавливают ограничения звука в телевизоре от дурака.


"""                      Практическая часть                        """

# Задание 1: Базовый класс с геттерами и сеттерами
# 1. Создайте класс Person со следующими требованиями:
# 2. Приватные атрибуты: __name, __age
# 3. Геттеры и сеттеры для этих атрибутов с проверками:
# 4. Имя не должно быть пустым и должно состоять только из букв
# 5. Возраст должен быть целым числом от 0 до 120


class Person:
    def __init__(self, name, age):
        self.__name = name
        self.__age = age
    
    def setName(self, name):
        if name == "":
            print("Имя не может быть пустым")
            return
    
    def setAge(self, age):
        if age > 0 and age < 120:
            self.__age = age
        else:
            print("Недопустимое значение")
    
    def print(self):
        print(f"{self.__name}, {self.__age}")

student = Person("Ururu", 16)
student.print()



# Задание 2: Класс с вычисляемым свойством
# Создайте класс Rectangle:
# 1. Приватные атрибуты: __width, __height
# 2. Геттеры и сеттеры для ширины и высоты (должны быть положительными числами)
# 3. Свойство area (только геттер), которое возвращает площадь прямоугольника

class Rectangle:
    def __init__(self, width, height):
        self.__width = width
        self.__height = height
    
    @property
    def width(self):
        return self.__width
    
    @width.setter
    def width(self, value):
        self.__width = value
    
    @property
    def height(self):
        return self.__height
    
    @height.setter
    def height(self, value):
        self.__height = value
    
    @property
    def square(self):
        return self.__width * self.__height

rect = Rectangle(5, 10)
print(rect.square)


